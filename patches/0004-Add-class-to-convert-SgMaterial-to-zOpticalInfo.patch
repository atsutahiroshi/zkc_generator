From 1d5449481ad793212cec116971f5aa968ae6bcc1 Mon Sep 17 00:00:00 2001
From: Hiroshi Atsuta <atsuta.hiroshi@gmail.com>
Date: Thu, 5 Oct 2017 19:09:00 +0200
Subject: [PATCH 04/41] Add class to convert SgMaterial to zOpticalInfo

---
 src/RokiPlugin/RokiSimulatorItem.cpp | 93 ++++++++++++++++++++++++++++++++++++
 1 file changed, 93 insertions(+)

diff --git a/src/RokiPlugin/RokiSimulatorItem.cpp b/src/RokiPlugin/RokiSimulatorItem.cpp
index 53918ee..2e9b2c8 100644
--- a/src/RokiPlugin/RokiSimulatorItem.cpp
+++ b/src/RokiPlugin/RokiSimulatorItem.cpp
@@ -211,6 +211,22 @@ private:
     RokiBody* rokiBody;
 };
 
+class RokiOpticalInfo : public SgMaterial
+{
+public:
+    RokiOpticalInfo();
+    RokiOpticalInfo(const RokiOpticalInfo& org);
+    RokiOpticalInfo(const SgMaterial& org);
+
+    bool operator==(const RokiOpticalInfo& other) const;
+    bool operator!=(const RokiOpticalInfo& other) const;
+
+    void exportToZOpticalInfo(zOpticalInfo* opt);
+
+private:
+    string createName(Vector3f amb, Vector3f dif, Vector3f spc, float ns, float sns, float alpha);
+};
+
 }
 
 namespace cnoid {
@@ -949,6 +965,83 @@ void RokiBody::updateForceSensors()
 }
 
 
+RokiOpticalInfo::RokiOpticalInfo()
+{
+}
+
+
+RokiOpticalInfo::RokiOpticalInfo(const RokiOpticalInfo& org)
+    : SgMaterial(org)
+{
+}
+
+
+RokiOpticalInfo::RokiOpticalInfo(const SgMaterial& org)
+    : SgMaterial(org)
+{
+}
+
+
+bool RokiOpticalInfo::operator==(const RokiOpticalInfo& other) const
+{
+    const float epsilon = 1.0e-4;
+
+    return ((diffuseColor() - other.diffuseColor()).norm() < epsilon) &&
+        ((emissiveColor() - other.emissiveColor()).norm() < epsilon) &&
+        ((specularColor() - other.specularColor()).norm() < epsilon) &&
+        ((ambientIntensity() - other.ambientIntensity()) < epsilon) &&
+        ((shininess() - other.shininess()) < epsilon) &&
+        ((transparency() - other.transparency()) < epsilon);
+}
+
+
+bool RokiOpticalInfo::operator!=(const RokiOpticalInfo& other) const
+{
+    return !(*this == other);
+}
+
+
+string RokiOpticalInfo::createName(Vector3f amb, Vector3f dif, Vector3f spc, float ns, float sns, float alpha)
+{
+    string name = "#";
+    stringstream stream;
+
+    amb *= 255.0f;
+    dif *= 255.0f;
+    spc *= 255.0f;
+    ns  *= 255.0f;
+    sns *= 255.0f;
+    alpha *= 255.0f;
+    stream << std::hex
+           << (int)amb[0] << (int)amb[1] << (int)amb[2]
+           << (int)dif[0] << (int)dif[1] << (int)dif[2]
+           << (int)spc[0] << (int)spc[1] << (int)spc[2]
+           << (int)ns << (int)sns << (int)alpha;
+    name += stream.str();
+
+    return name;
+}
+
+
+void RokiOpticalInfo::exportToZOpticalInfo(zOpticalInfo* opt)
+{
+    Vector3f amb = diffuseColor() * ambientIntensity();
+    Vector3f dif = diffuseColor();
+    Vector3f spc = specularColor();
+    float ns  = 1.0;
+    float sns = (127.0f * shininess()) + 1.0f;
+    float alpha = 1.0 - transparency();
+    string name = createName(amb, dif, spc, ns, sns, alpha);
+
+    zOpticalInfoCreate(opt,
+                       amb[0], amb[1], amb[2],
+                       dif[0], dif[1], dif[2],
+                       spc[0], spc[1], spc[2],
+                       ns, sns, alpha,
+                       (char *)name.c_str());
+}
+
+
 void RokiSimulatorItem::initializeClass(ExtensionManager* ext)
 {
     ext->itemManager().registerClass<RokiSimulatorItem>(N_("RokiSimulatorItem"));
-- 
2.7.4

